name: build-containers

on:
  push:
    branches: ['main']
    tags:
      - 'v*'
  pull_request:
    branches: ['main']

jobs:
  sender:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write

    outputs:
      docker_image: ${{ steps.prepare.outputs.docker_image }}
      version: ${{ steps.prepare.outputs.version }}

    env:
      REGISTRY: ghcr.io
      IMAGE_FILE: queue-sender/Dockerfile
      IMAGE_NAME: queue-sender
      PLATFORMS: linux/amd64,linux/arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare üî∞
        id: prepare
        run: |
          echo "docker_image=${{env.REGISTRY}}/${{github.actor}}/$IMAGE_NAME" >> $GITHUB_OUTPUT

          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # # Strip "v" prefix from tag name
          # [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=v$(echo $VERSION | sed -e 's/^v//')
          # # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

          echo "buildx_args=--platform $PLATFORMS \
            --build-arg VERSION=${VERSION} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VERSION=$VERSION \
            --tag ${{env.REGISTRY}}/${{github.actor}}/$IMAGE_NAME:$VERSION --file $IMAGE_FILE ." >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx üìê
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }} üîç
        if: success() && !contains(github.event_name, 'pull_request')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Push üìå
        run: docker buildx build --output "type=image,push=${{ !contains(github.event_name, 'pull_request') }}" ${{ steps.prepare.outputs.buildx_args }}

  receiver:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write

    outputs:
      docker_image: ${{ steps.prepare.outputs.docker_image }}
      version: ${{ steps.prepare.outputs.version }}

    env:
      REGISTRY: ghcr.io
      IMAGE_FILE: queue-receiver/Dockerfile
      IMAGE_NAME: queue-receiver
      PLATFORMS: linux/amd64,linux/arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare üî∞
        id: prepare
        run: |
          echo "docker_image=${{env.REGISTRY}}/${{github.actor}}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT

          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # # Strip "v" prefix from tag name
          # [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=v$(echo $VERSION | sed -e 's/^v//')
          # # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

          echo "buildx_args=--platform $PLATFORMS \
            --build-arg VERSION=${VERSION} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VERSION=$VERSION \
            --tag ${{env.REGISTRY}}/${{github.actor}}/$IMAGE_NAME:$VERSION --file $IMAGE_FILE ." >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx üìê
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }} üîç
        if: success() && !contains(github.event_name, 'pull_request')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Push üìå
        run: docker buildx build --output "type=image,push=${{ !contains(github.event_name, 'pull_request') }}" ${{ steps.prepare.outputs.buildx_args }}

  rollout:
    runs-on: ubuntu-24.04
    needs: [sender, receiver]
    if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    env:
      KUBE_CONTAINER: deploy/tokenizer
      KUBE_NAMESPACE: dvgamerr

    steps:
      - name: Create GitHub Release üéâ
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## What's Changed

            üê≥ **Docker Images:**
            - `${{ needs.sender.outputs.docker_image }}:${{ needs.sender.outputs.version }}`
            - `${{ needs.receiver.outputs.docker_image }}:${{ needs.receiver.outputs.version }}`

            Built from commit: ${{ github.sha }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set new image üñºÔ∏è
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: --insecure-skip-tls-verify=true set image ${{ env.KUBE_CONTAINER }} sender=${{ needs.sender.outputs.docker_image }}:${{ needs.sender.outputs.version }} receiver=${{ needs.receiver.outputs.docker_image }}:${{ needs.receiver.outputs.version }} -n ${{ env.KUBE_NAMESPACE }}

      - name: Trigger deploy üöÄ
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: --insecure-skip-tls-verify=true rollout restart ${{ env.KUBE_CONTAINER }} -n ${{ env.KUBE_NAMESPACE }}

      # - name: Status deployment üîç
      #   uses: actions-hub/kubectl@master
      #   env:
      #     KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      #   with:
      #     args: --insecure-skip-tls-verify=true rollout status --timeout=180s ${{ env.KUBE_CONTAINER }} -n ${{ env.KUBE_NAMESPACE }}

      - name: Discord Alert
        if: success()
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          content: '`${{ env.KUBE_CONTAINER }}` successfully rolled out image `${{ needs.receiver.outputs.docker_image }}:${{ needs.receiver.outputs.version }}`'

      - name: Fail Alert
        continue-on-error: true
        if: failure()
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          content: "Rollout `${{ env.KUBE_CONTAINER }}` <:fai:1065521737896300604><:led:1065521734096257024>.\n Check: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}>"
